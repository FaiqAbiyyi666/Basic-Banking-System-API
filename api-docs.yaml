openapi: 3.0.1 ### versi API
info: 
  title: Banking System API ###judul api ### wajib diisi
  description: API basic banking system
  version: 1.0.0 ### wajib diisi
  contact:
    email: abiyyiaja@gmail.com
servers:
  - url: http://localhost:3000/api/v1
tags:
  - name: "Auth"
    description: Everything about auth user
  - name: Users
    description: Everything about Users
  - name: Accounts
    description: Everything about Account
  - name: Transactions
    description: Everything about Transactions

paths:
  /auth/register :
    post:
      tags:
        - "Auth"
      summary: Register user
      description: Register user with the provided information.
      requestBody:
        $ref: "#/components/requestBodies/Register"
                
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: 
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK 
                  data:
                    allOf:
                      - $ref: "#/components/schemas/user"
                      - type: object
                        properties:
                          password:
                            type: string
                            example: 123456
        400:
          description: Email already exists!
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Email already used!
                  data:
                    example: ~
        401:
          description: Input must be required!
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Input must be required
                  data:
                    example: ~
  
  /auth/login :
    post:
      tags:
        - "Auth"
      summary: Login user
      description: Login user with the provided information.
      requestBody:
        $ref: '#/components/requestBodies/createLogin'
                
      responses:
        201:
          description: Login was successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Login was successfull
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: bagus
                      email:
                        type: string
                        example: bagus@gmail.com
                      token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTQsIm5hbWUiOiJhbmpheSIsImVtYWlsIjoiYW5qYXlAZ21haWwuY29tIiwiaWF0IjoxNzE1MTM2MjQ2fQ.iXZomPgaYiovQ6qw-yz9rJ5mH1nj4oEfRkjbIo46WrU

        400:
          description: invalid email or password!
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: invalid email or password!
                  data:
                    example: ~ 

  /auth/authenticate :
    get:
      tags:
        - "Auth"
      summary: Authenticate user
      description: Authenticate user with the token.
                
      responses:
        200:
          description: Login was successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: guntur
                      email:
                        type: string
                        example: guntur@gmail.com                         

        400:
          description: jwt malformed!
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: jwt malformed
                  data:
                    example: ~    
            
        401:
          description: Token not provided!
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: token not provided!!
                  data:
                    example: ~    

      security:
        - bearerAuth: []

  /users:
    post:
      tags:
        - "Users"
      summary: Register new user 
      description: Mendaftarkan user baru ke dalam database
      requestBody:
        $ref: "#/components/requestBodies/Register"
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: 
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK 
                  data:
                    allOf:
                      - $ref: "#/components/schemas/user"
                      - type: object
                        properties:
                          password:
                            type: string
                            example: 123456

        400: 
          description: Duplicate email
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Email or Identity Number already used!
      
    get:
      tags:
        - "Users"
      summary: Get all users 
      parameters:
        - schema:
            type: string
          name: search
          in: query
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: 
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK 
                  data:
                    type: array
                    items: 
                      allOf:
                        - $ref: "#/components/schemas/user"
                        - type: object
                          properties:
                            password:
                              type: string
                              example: 123456
      
      security:
        - bearerAuth: []

  /users/{user_id}:
    parameters:
      - schema:
          type: integer
        name: user_id
        in: path
        required: true
    get:
      tags:
        - "Users"
      summary: Get detail user by id
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: 
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK 
                  data:
                    allOf:
                      - $ref: "#/components/schemas/user"
                      - type: object
                        properties:
                          password:
                            type: string
                            example: 123456 

        400:
          description: Failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Can't find user with id
      
      security:
        - bearerAuth: []

  /account:
    post:
      tags:
        - "Accounts"
      summary: Register new account 
      description: Mendaftarkan account baru ke dalam database
      requestBody:
        $ref: "#/components/requestBodies/createAccount"
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: 
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK 
                  data:
                    allOf:
                      - $ref: "#/components/schemas/account"
        
        400: 
          description: Duplicate Bank Account
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Bank Account Number already used!

      security:
        - bearerAuth: []
    
    get:
      tags:
        - "Accounts"
      summary: Get all bank account
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: 
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK 
                  data:
                    type: array
                    items: 
                      allOf:
                        - $ref: "#/components/schemas/account"
      
      security:
        - bearerAuth: []
    
  /accounts/{account_id}:
    parameters:
      - schema:
          type: integer
        name: account_id
        in: path
        required: true
    get:
      tags:
        - "Accounts"
      summary: Get detail bank account by id
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: 
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK 
                  data:
                    allOf:
                      - $ref: "#/components/schemas/account"

        400:
          description: Failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Can't find account with id
      
      security:
        - bearerAuth: []

  /transactions:
    post:
      tags:
        - "Transactions"
      summary: Register new transaction 
      description: Mendaftarkan transaction baru ke dalam database
      requestBody:
        $ref: "#/components/requestBodies/createTransaction"
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: 
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK 
                  data:
                    allOf:
                      - $ref: "#/components/schemas/transaction"

      security:
      - bearerAuth: []
    
    get:
      tags:
        - "Transactions"
      summary: Get all transaction
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: 
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK 
                  data:
                    type: array
                    items: 
                      allOf:
                        - $ref: "#/components/schemas/transaction"

      security:
        - bearerAuth: []

  /transactions/{transaction_id}:
    parameters:
      - schema:
          type: integer
        name: transaction_id
        in: path
        required: true
    get:
      tags:
        - "Transactions"
      summary: Get detail transaction by id
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: 
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK 
                  data:
                    allOf:
                      - $ref: "#/components/schemas/transaction"

        400:
          description: Failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Can't find transaction with id

      security:
        - bearerAuth: []


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    user: 
      title: User 
      type: object
      properties:
        id: 
          type: integer
          example: 5
        name: 
          type: string
          example: bagus
        email:  
          type: string
          example: bagus@gmail.com
        profile:
          type: object 
          properties:
            id: 
              type: integer
              example: 5
            identity_type: 
              type: string
              example: ktp
            identity_number:  
              type: string
              example: 111222000333
            address: 
              type: string
              example: Sidoarjo
            user_id: 
              type: integer
              example: 5

    account:
      title: Account
      type: object
      properties:
        id: 
          type: integer
          example: 5
        bank_name: 
          type: string
          example: BCA
        bank_account_number:  
          type: string
          example: 111222000333
        balance: 
          type: integer
          example: 120000
        user_id:
          type: integer 
          example: 5
    
    transaction:
      properties:
        id: 
          type: integer
          example: 3
        amount:
          type: integer
          example: 10000
        source_account_id:
          type: integer
          example: 3
        source_destination_id:
          type: integer
          example: 4

  requestBodies:
    Register:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: bagus
              email:
                type: string
                example: bagus@gmail.com
              password:
                type: string
                example: 123456
              identity_type:
                type: string
                example: ktp
              identity_number:
                type: string
                example: 111222000333
              address:
                type: string
                example: Sidoarjo 
    
    createLogin:
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                example: bagus@gmail.com
              password:
                type: string
                example: 12345
    
    createAccount:
      content:
        application/json:
          schema:
            type: object
            properties:
              bank_name:
                type: string
                example: BCA
              bank_account_number:
                type: string
                example: 155000555
              balance:
                type: integer
                example: 120000
              user_id:
                type: integer
                example: 5
            
    createTransaction:
      content:
        application/json:
          schema:
            type: object
            properties:
              amount:
                type: integer
                example: 10000
              source_account_id:
                type: integer
                example: 4
              source_destination_id:
                type: integer
                example: 5
